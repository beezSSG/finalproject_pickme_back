<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
<mapper namespace="com.pickme.beeze.customer.dao.CustomerDao">

	<!-- 장바구니 -->
<!-- 장바구니 담기 -->
<select id="getsProductId" parameterType="map" resultType="Integer">
	select store_product.id
	from store_product
	inner join product on store_product.product_id = product.id
	where product.id = #{productId} and store_product.store_id = #{storeId};
</select>
<select id="haveMyCart" parameterType="CartDto" resultType="Integer"> <!-- 1일때 더이상 집어 넣을 수 없게 하기 -->
	SELECT count(*)
	  FROM cart
	 WHERE customer_id = #{customerId} and s_product_id = #{sProductId}
</select>
<insert id="cartInsert" parameterType="CartDto">
	insert into cart(customer_id,s_product_id,quantity,order_yn)
	values(#{customerId},#{sProductId},#{quantity},0)
</insert>

<!-- 장바구니 목록보기 -->
<select id="getMyCart" parameterType="Integer" resultType="CartDto" > 
	<!-- order_yn [0 == 결제완료전 / 1 == 결제완료] -->
	SELECT id, customer_id, s_product_id, quantity
	  FROM cart
	 WHERE order_yn = 0 and customer_id = #{id}
</select>
<!-- 목록에 대한 물품 조회 -->
<select id="getMyCartProduct" parameterType="CartDto" resultType="CartDto">
	SELECT p.name as `productName`, p.price as `productPrice`, p.url as `productUrl`
	  FROM store_product s INNER JOIN  product  p
	    ON s.product_id = p.id
	 WHERE s.id = #{sProductId};
</select>

<!-- 장바구니 목록삭제 -->
<delete id="delCart" parameterType="CartDto">
	delete from cart
	 where customer_id = #{customerId} and s_product_id = #{sProductId}
</delete>

<!-- 장바구니 물품 수량 변경 -->
<update id="changeMyQuantity" parameterType="CartDto">
	UPDATE cart
	   SET quantity = #{quantity}
	 WHERE customer_id = #{customerId} and s_product_id = #{sProductId}
</update>


	<!-- 찜하기 -->
<!-- 찜 목록 확인 (중복여부 체크) -->
<select id="checkZZIM" parameterType="map" resultType="Integer">
	select count(*)
	from save
	where product_id = #{productId} and customer_id = #{customerId}
</select>

<!-- 상품 찜 추가 -->
<insert id="insertZZIM" parameterType="map">
	insert into save(product_id, customer_id)
	values ( #{productId}, #{customerId})
</insert>

<!-- 상품 찜 추가 -->
<delete id="deleteZZIM" parameterType="map">
	delete from save
	where product_id = #{productId} and customer_id = #{customerId}
</delete>



	<!-- 주문하기 -->
<!-- order에 넣기 -->
<insert id="order" parameterType="CartDto">
	INSERT INTO `order`(cart_id, date, cancel_yn, pick_del)
	VALUES(#{id}, now(), 0 , #{pickDel})
</insert>


<!-- 택배 예약하기 -->
<insert id="postreservation" parameterType="PostDto">
	insert into post(customer_id,store_id,to_user,to_phone,to_address,reservation_name,reservation_password,item_category,item_price,item_weight,important_info,total_price,date,post_yn)
	values(#{customerId},#{storeId},#{toUser},#{toPhone},#{toAddress},#{reservationName},#{reservationPassword},#{itemCategory},#{itemPrice},#{itemWeight},#{importantInfo},#{totalPrice},now(),0)
</insert>



<!-- 장바구니에서 제거  -->
<update id="buyCart" parameterType="CartDto">
	UPDATE cart
	   SET order_yn = 1
	 WHERE id = #{id}
</update>
<!-- 점포 수량변경 -->
<!-- 장바구니에 대한 수량 불러오기 -->
<select id="cartQuantity" parameterType="CartDto" resultType="CartDto">
	SELECT quantity, s_product_id as `sProductId`
	  FROM cart
	 WHERE id = #{id}
</select>
<!-- 수량을 점포에 바꿔 변경하기 -->
<update id="minusStoreProductQuantity" parameterType="CartDto">
	UPDATE store_product
	   SET quantity = quantity - #{quantity}
	 WHERE id = #{sProductId};
</update>
	
	<!-- 결제 취소시 행동 -->
	
	
<!-- 상품 예약 -->
<!--  상품 목록 불러오기 -->
<select id="reservationproductlist" parameterType="com.pickme.beeze.product.dto.ProductParam" resultType="com.pickme.beeze.product.dto.ProductDto">
    SELECT name, price, url
    FROM product
    <if test="search != null and search != ''">
        WHERE (name LIKE CONCAT('%', #{search}, '%'))
    </if>
    LIMIT #{start}, #{perPage}
</select>

<!-- 상품 예약 후 db에 저장 -->
<insert id="productreservationAf" parameterType="com.pickme.beeze.customer.dto.ProductReservationDto">
  insert into product_reservation (product_id, customer_id, store_id, quantity, pick_yn)
  values (
    (select id from product where name = #{productName}), 
    #{customerId}, 
    #{storeId}, 
    #{quantity}, 
    0
  )
</insert>

<!--  매장 번호 가져오기 -->
<select id="storeselect" parameterType="String" resultType="Integer">
	select id
	from store
	where name=#{storename}
</select>
<!-- 매장 이름 가져오기 -->
<select id="selectstorename" parameterType="Integer" resultType="String">
	select name
	from store
	where id=#{id}
</select>

<!--  아이디 가져오기 -->
<select id="getid" parameterType="Integer" resultType="String">
	select email
	from customer_info
	where id=#{id}
</select>


</mapper>