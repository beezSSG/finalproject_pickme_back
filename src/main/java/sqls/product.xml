<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

 <mapper namespace="com.pickme.beeze.product.dao.ProductDao">


 <!-- 전체 상품 목록 -->
 <select id="productlist" parameterType="com.pickme.beeze.product.dto.ProductParam"
				resultType="com.pickme.beeze.product.dto.ProductDto">
	select p.id, p.name, p.price, p.url, p.product_rating as `productRating`
 	from product p
	
	<if test="category == 0">
		<if test="choice == 'date'">				
			<if test="search != null and search != '' ">	
				where name like concat('%', #{search}, '%')
			</if>
			<if test="switching == true">
	 			order by id desc
			</if>
			<if test="switching == false">
	 			order by id asc
			</if>
		</if>
		
		<if test="choice == 'rate'">				
			<if test="search != null and search != '' ">	
				where name like concat('%', #{search}, '%')
			</if>
			<if test="switching == true">
	 			order by productRating desc
			</if>
			<if test="switching == false">
	 			order by productRating asc
			</if>
		</if>
		
		<if test="choice == 'select'">
			<if test="search != null and search != '' ">
				where name like concat('%', #{search}, '%')
			</if>
			order by name asc
		</if>
		
		<if test="choice == ''">
			order by name asc
		</if>
	</if>
	
	<if test="category != 0">
		, product_category pc
		where p.id = pc.product_id
		
		<if test="choice == 'date'">				
			<if test="search != null and search != '' ">	
				and name like concat('%', #{search}, '%') and pc.category_id = #{category}
			</if>
				 and pc.category_id = #{category}
			<if test="switching == true">
	 			order by id desc
			</if>
			<if test="switching == false">
	 			order by id asc
			</if>
		</if>
		
		<if test="choice == 'rate'">				
			<if test="search != null and search != '' ">	
				and name like concat('%', #{search}, '%') and pc.category_id = #{category}
			</if>
				 and pc.category_id = #{category}
			<if test="switching == true">
	 			order by productRating desc
			</if>
			<if test="switching == false">
	 			order by productRating asc
			</if>
		</if>
		
		<if test="choice == 'select'">
			<if test="search != null and search != '' ">
				and name like concat('%', #{search}, '%') and pc.category_id = #{category}
			</if>
				and pc.category_id = #{category}
			order by name asc
		</if>
		
		<if test="choice == ''">
			order by name asc
		</if>
	</if>
	
	limit ${(pageNumber * 9)}, 9
</select>

 
 <!-- 전체 상품 수 -->
<select id="getallproduct" parameterType="com.pickme.beeze.product.dto.ProductDto"
				resultType="java.lang.Integer">
	select count(*) 
	from product p
	<if test="category == 0">
		<if test="search != null and search != '' ">
			where name like concat('%', #{search}, '%')
		</if>
	</if>
	
	<if test="category != 0">
		, product_category pc
		where p.id = pc.product_id
		<if test="search != null and search != '' ">
			and name like concat('%', #{search}, '%')
		</if>
		and pc.category_id = #{category}
	</if>	
</select>
 
 <!-- 상품 상세보기 -->
 <select id = "productdetail" parameterType="java.lang.Integer" resultType="com.pickme.beeze.product.dto.ProductDto">
 	select p.id, p.name, p.price, p.url, p.product_rating as `productRating`, pc.category_id as `categoryId`
 	from product p, product_category pc
 	where p.id=#{id} and p.id = pc.product_id
 </select>


 
<!-- 신제품 등록 -->
<insert id="newproductinsert" parameterType="com.pickme.beeze.product.dto.ProductDto">
	insert into product(name,price,url)
	values (#{name}, #{price}, #{url})
</insert>

<!-- 상품 평점 계산 -->
<update id="productRatingAvg" parameterType="Integer">
    UPDATE product
    SET product_rating = (
        SELECT AVG(rating)
        FROM review
        WHERE product_id = #{productId}
    )
    WHERE id = #{productId};
</update>

	<!-- 선물하기 -->
<!-- 선물보내기 비회원일경우 이메일로 보내기 -->
<insert id="sendGift" parameterType="ProductGiftDto">
	INSERT INTO gift(customer_id, send_customer_id, product_id, content, exp_day, use_yn)
	VALUES (#{customerId}, #{sendCustomerId}, #{productId}, #{content}, #{expDay}, #{useYn})
</insert>

<!-- 선물할사람 정보 조회 -->
<select id="findFromUser" parameterType="String" resultType="ProductGiftParam">
	SELECT id, email, name
	  FROM customer_info
	 WHERE phone=#{phone}
</select>

<!-- 내 선물목록보기 -->
<select id="getMyGift" parameterType="Integer" resultType="ProductGiftDto">
	SELECT c.name as `giftUserName`, p.name as `productName`, p.url as `productUrl`, g.exp_day, g.id
	  FROM gift g
	 INNER JOIN customer_info c ON g.customer_id = c.id
	 INNER JOIN product p ON g.product_id = p.id
	 WHERE send_customer_id = #{id} and use_yn = 0
</select>

<!-- 선물사용 -->
<update id="useGift" parameterType="Integer">
	UPDATE gift 
	   SET use_yn = 1
	 WHERE id = #{id}
</update>

</mapper>
 